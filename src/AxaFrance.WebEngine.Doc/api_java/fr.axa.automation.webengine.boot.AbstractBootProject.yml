### YamlMime:ManagedReference
items:
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject"
  id: "AbstractBootProject"
  parent: "fr.axa.automation.webengine.boot"
  children:
  - "fr.axa.automation.webengine.boot.AbstractBootProject.AbstractBootProject(fr.axa.automation.webengine.core.ITestSuiteExecutor,fr.axa.automation.webengine.report.helper.global.IReportHelper,fr.axa.automation.webengine.logger.ILoggerService,fr.axa.automation.webengine.properties.GlobalConfiguration)"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework()"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet()"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue(java.util.List<java.lang.String>)"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.loadProject(org.apache.commons.cli.CommandLine)"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.runFromFramework(java.lang.String...)"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.runFromProject(java.lang.String...)"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite(org.apache.commons.cli.CommandLine)"
  langs:
  - "java"
  name: "AbstractBootProject"
  nameWithType: "AbstractBootProject"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject"
  type: "Class"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "public abstract class AbstractBootProject implements IBootProject"
  inheritance:
  - "java.lang.Object"
  implements:
  - "fr.axa.automation.webengine.boot.IBootProject"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.AbstractBootProject(fr.axa.automation.webengine.core.ITestSuiteExecutor,fr.axa.automation.webengine.report.helper.global.IReportHelper,fr.axa.automation.webengine.logger.ILoggerService,fr.axa.automation.webengine.properties.GlobalConfiguration)"
  id: "AbstractBootProject(fr.axa.automation.webengine.core.ITestSuiteExecutor,fr.axa.automation.webengine.report.helper.global.IReportHelper,fr.axa.automation.webengine.logger.ILoggerService,fr.axa.automation.webengine.properties.GlobalConfiguration)"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "AbstractBootProject(ITestSuiteExecutor testSuiteExecutor, IReportHelper reportHelper, ILoggerService loggerService, GlobalConfiguration globalConfiguration)"
  nameWithType: "AbstractBootProject.AbstractBootProject(ITestSuiteExecutor testSuiteExecutor, IReportHelper reportHelper, ILoggerService loggerService, GlobalConfiguration globalConfiguration)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.AbstractBootProject(ITestSuiteExecutor testSuiteExecutor, IReportHelper reportHelper, ILoggerService loggerService, GlobalConfiguration globalConfiguration)"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.AbstractBootProject*"
  type: "Constructor"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "public AbstractBootProject(ITestSuiteExecutor testSuiteExecutor, IReportHelper reportHelper, ILoggerService loggerService, GlobalConfiguration globalConfiguration)"
    parameters:
    - id: "testSuiteExecutor"
      type: "fr.axa.automation.webengine.core.ITestSuiteExecutor"
    - id: "reportHelper"
      type: "fr.axa.automation.webengine.report.helper.global.IReportHelper"
    - id: "loggerService"
      type: "fr.axa.automation.webengine.logger.ILoggerService"
    - id: "globalConfiguration"
      type: "fr.axa.automation.webengine.properties.GlobalConfiguration"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework()"
  id: "getArgumentOptionFramework()"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "getArgumentOptionFramework()"
  nameWithType: "AbstractBootProject.getArgumentOptionFramework()"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework()"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "protected abstract List<ArgumentOption> getArgumentOptionFramework()"
    return:
      type: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet()"
  id: "getArgumentOptionProjet()"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "getArgumentOptionProjet()"
  nameWithType: "AbstractBootProject.getArgumentOptionProjet()"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet()"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "protected abstract List<ArgumentOption> getArgumentOptionProjet()"
    return:
      type: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  id: "getArgumentsForProject(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "getArgumentsForProject(List<ArgumentOption> argumentOptionList, String[] args)"
  nameWithType: "AbstractBootProject.getArgumentsForProject(List<ArgumentOption> argumentOptionList, String[] args)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject(List<ArgumentOption> argumentOptionList, String[] args)"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "protected List<String> getArgumentsForProject(List<ArgumentOption> argumentOptionList, String[] args)"
    parameters:
    - id: "argumentOptionList"
      type: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
    - id: "args"
      type: "java.lang.String[]"
    return:
      type: "java.util.List<java.lang.String>"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue(java.util.List<java.lang.String>)"
  id: "getArgumentsSeparatedByOptionAndValue(java.util.List<java.lang.String>)"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "getArgumentsSeparatedByOptionAndValue(List<String> filterArguments)"
  nameWithType: "AbstractBootProject.getArgumentsSeparatedByOptionAndValue(List<String> filterArguments)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue(List<String> filterArguments)"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "protected String[] getArgumentsSeparatedByOptionAndValue(List<String> filterArguments)"
    parameters:
    - id: "filterArguments"
      type: "java.util.List<java.lang.String>"
    return:
      type: "java.lang.String[]"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  id: "getCommandLine(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "getCommandLine(List<ArgumentOption> argumentOptionList, String[] args)"
  nameWithType: "AbstractBootProject.getCommandLine(List<ArgumentOption> argumentOptionList, String[] args)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine(List<ArgumentOption> argumentOptionList, String[] args)"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "protected CommandLine getCommandLine(List<ArgumentOption> argumentOptionList, String[] args)"
    parameters:
    - id: "argumentOptionList"
      type: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
    - id: "args"
      type: "java.lang.String[]"
    return:
      type: "org.apache.commons.cli.CommandLine"
  exceptions:
  - type: "org.apache.commons.cli.ParseException"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.loadProject(org.apache.commons.cli.CommandLine)"
  id: "loadProject(org.apache.commons.cli.CommandLine)"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "loadProject(CommandLine commandLine)"
  nameWithType: "AbstractBootProject.loadProject(CommandLine commandLine)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.loadProject(CommandLine commandLine)"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.loadProject*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "protected void loadProject(CommandLine commandLine)"
    parameters:
    - id: "commandLine"
      type: "org.apache.commons.cli.CommandLine"
  exceptions:
  - type: "fr.axa.automation.webengine.exception.WebEngineException"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromFramework(java.lang.String...)"
  id: "runFromFramework(java.lang.String...)"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "runFromFramework(String[] args)"
  nameWithType: "AbstractBootProject.runFromFramework(String[] args)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromFramework(String[] args)"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromFramework*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "public void runFromFramework(String[] args)"
    parameters:
    - id: "args"
      type: "java.lang.String[]"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromProject(java.lang.String...)"
  id: "runFromProject(java.lang.String...)"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "runFromProject(String[] args)"
  nameWithType: "AbstractBootProject.runFromProject(String[] args)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromProject(String[] args)"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromProject*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "public void runFromProject(String[] args)"
    parameters:
    - id: "args"
      type: "java.lang.String[]"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite(org.apache.commons.cli.CommandLine)"
  id: "runTestSuite(org.apache.commons.cli.CommandLine)"
  parent: "fr.axa.automation.webengine.boot.AbstractBootProject"
  langs:
  - "java"
  name: "runTestSuite(CommandLine commandLine)"
  nameWithType: "AbstractBootProject.runTestSuite(CommandLine commandLine)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite(CommandLine commandLine)"
  overload: "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "protected abstract void runTestSuite(CommandLine commandLine)"
    parameters:
    - id: "commandLine"
      type: "org.apache.commons.cli.CommandLine"
  exceptions:
  - type: "fr.axa.automation.webengine.exception.WebEngineException"
  - type: "java.io.IOException"
references:
- uid: "fr.axa.automation.webengine.core.ITestSuiteExecutor"
  name: "ITestSuiteExecutor"
  nameWithType: "ITestSuiteExecutor"
  fullName: "fr.axa.automation.webengine.core.ITestSuiteExecutor"
- uid: "fr.axa.automation.webengine.report.helper.global.IReportHelper"
  name: "IReportHelper"
  nameWithType: "IReportHelper"
  fullName: "fr.axa.automation.webengine.report.helper.global.IReportHelper"
- uid: "fr.axa.automation.webengine.logger.ILoggerService"
  name: "ILoggerService"
  nameWithType: "ILoggerService"
  fullName: "fr.axa.automation.webengine.logger.ILoggerService"
- uid: "fr.axa.automation.webengine.properties.GlobalConfiguration"
  name: "GlobalConfiguration"
  nameWithType: "GlobalConfiguration"
  fullName: "fr.axa.automation.webengine.properties.GlobalConfiguration"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.AbstractBootProject*"
  name: "AbstractBootProject"
  nameWithType: "AbstractBootProject.AbstractBootProject"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.AbstractBootProject"
  package: "fr.axa.automation.webengine.boot"
- uid: "java.lang.Exception"
  spec.java:
  - uid: "java.lang.Exception"
    name: "Exception"
    fullName: "java.lang.Exception"
- uid: "java.lang.String[]"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: "[]"
    fullName: "[]"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromFramework*"
  name: "runFromFramework"
  nameWithType: "AbstractBootProject.runFromFramework"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromFramework"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromProject*"
  name: "runFromProject"
  nameWithType: "AbstractBootProject.runFromProject"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromProject"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.exception.WebEngineException"
  name: "WebEngineException"
  nameWithType: "WebEngineException"
  fullName: "fr.axa.automation.webengine.exception.WebEngineException"
- uid: "org.apache.commons.cli.CommandLine"
  spec.java:
  - uid: "org.apache.commons.cli.CommandLine"
    name: "CommandLine"
    fullName: "org.apache.commons.cli.CommandLine"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.loadProject*"
  name: "loadProject"
  nameWithType: "AbstractBootProject.loadProject"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.loadProject"
  package: "fr.axa.automation.webengine.boot"
- uid: "org.apache.commons.cli.ParseException"
  spec.java:
  - uid: "org.apache.commons.cli.ParseException"
    name: "ParseException"
    fullName: "org.apache.commons.cli.ParseException"
- uid: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "fr.axa.automation.webengine.argument.ArgumentOption"
    name: "ArgumentOption"
    fullName: "fr.axa.automation.webengine.argument.ArgumentOption"
  - name: ">"
    fullName: ">"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine*"
  name: "getCommandLine"
  nameWithType: "AbstractBootProject.getCommandLine"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine"
  package: "fr.axa.automation.webengine.boot"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject*"
  name: "getArgumentsForProject"
  nameWithType: "AbstractBootProject.getArgumentsForProject"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue*"
  name: "getArgumentsSeparatedByOptionAndValue"
  nameWithType: "AbstractBootProject.getArgumentsSeparatedByOptionAndValue"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue"
  package: "fr.axa.automation.webengine.boot"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite*"
  name: "runTestSuite"
  nameWithType: "AbstractBootProject.runTestSuite"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework*"
  name: "getArgumentOptionFramework"
  nameWithType: "AbstractBootProject.getArgumentOptionFramework"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet*"
  name: "getArgumentOptionProjet"
  nameWithType: "AbstractBootProject.getArgumentOptionProjet"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.boot.IBootProject"
  name: "IBootProject"
  nameWithType: "IBootProject"
  fullName: "fr.axa.automation.webengine.boot.IBootProject"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "fr.axa.automation.webengine.argument.ArgumentOption"
  name: "ArgumentOption"
  nameWithType: "ArgumentOption"
  fullName: "fr.axa.automation.webengine.argument.ArgumentOption"
- uid: "java.lang.String"
  name: "String"
  nameWithType: "String"
  fullName: "java.lang.String"
