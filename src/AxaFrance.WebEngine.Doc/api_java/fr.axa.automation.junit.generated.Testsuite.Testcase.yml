### YamlMime:ManagedReference
items:
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  id: "Testcase"
  parent: "fr.axa.automation.junit.generated"
  children:
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.Error"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.Failure"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.Testcase()"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.classname"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.error"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.failure"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.getClassname()"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.getError()"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.getFailure()"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.getName()"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.getSkipped()"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.getTime()"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.name"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.setClassname(java.lang.String)"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.setError(fr.axa.automation.junit.generated.Testsuite.Testcase.Error)"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.setFailure(fr.axa.automation.junit.generated.Testsuite.Testcase.Failure)"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.setName(java.lang.String)"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.setSkipped(fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped)"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.setTime(java.math.BigDecimal)"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.skipped"
  - "fr.axa.automation.junit.generated.Testsuite.Testcase.time"
  langs:
  - "java"
  name: "Testsuite.Testcase"
  nameWithType: "Testsuite.Testcase"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  type: "Class"
  package: "fr.axa.automation.junit.generated"
  summary: "Java class for anonymous complex type.\n\nThe following schema fragment specifies the expected content contained within this class.\n\n```java\n<complexType>\n   <complexContent>\n     <restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\n       <choice minOccurs=\"0\">\n         <element name=\"skipped\" minOccurs=\"0\">\n           <complexType>\n             <simpleContent>\n               <extension base=\"<>pre-string\">\n                 <attribute name=\"message\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n               </extension>\n             </simpleContent>\n           </complexType>\n         </element>\n         <element name=\"error\" minOccurs=\"0\">\n           <complexType>\n             <simpleContent>\n               <extension base=\"<>pre-string\">\n                 <attribute name=\"message\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n                 <attribute name=\"type\" use=\"required\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n               </extension>\n             </simpleContent>\n           </complexType>\n         </element>\n         <element name=\"failure\">\n           <complexType>\n             <simpleContent>\n               <extension base=\"<>pre-string\">\n                 <attribute name=\"message\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n                 <attribute name=\"type\" use=\"required\" type=\"{http://www.w3.org/2001/XMLSchema}string\" />\n               </extension>\n             </simpleContent>\n           </complexType>\n         </element>\n       </choice>\n       <attribute name=\"name\" use=\"required\" type=\"{http://www.w3.org/2001/XMLSchema}token\" />\n       <attribute name=\"classname\" use=\"required\" type=\"{http://www.w3.org/2001/XMLSchema}token\" />\n       <attribute name=\"time\" use=\"required\" type=\"{http://www.w3.org/2001/XMLSchema}decimal\" />\n     </restriction>\n   </complexContent>\n </complexType>\n```"
  syntax:
    content: "public static class Testsuite.Testcase"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.Testcase()"
  id: "Testcase()"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "Testcase()"
  nameWithType: "Testsuite.Testcase.Testcase()"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.Testcase()"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.Testcase*"
  type: "Constructor"
  package: "fr.axa.automation.junit.generated"
  syntax:
    content: "public Testcase()"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.classname"
  id: "classname"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "classname"
  nameWithType: "Testsuite.Testcase.classname"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.classname"
  type: "Field"
  package: "fr.axa.automation.junit.generated"
  syntax:
    content: "protected String classname"
    return:
      type: "java.lang.String"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.error"
  id: "error"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "error"
  nameWithType: "Testsuite.Testcase.error"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.error"
  type: "Field"
  package: "fr.axa.automation.junit.generated"
  syntax:
    content: "protected Testsuite.Testcase.Error error"
    return:
      type: "fr.axa.automation.junit.generated.Testsuite.Testcase.Error"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.failure"
  id: "failure"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "failure"
  nameWithType: "Testsuite.Testcase.failure"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.failure"
  type: "Field"
  package: "fr.axa.automation.junit.generated"
  syntax:
    content: "protected Testsuite.Testcase.Failure failure"
    return:
      type: "fr.axa.automation.junit.generated.Testsuite.Testcase.Failure"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getClassname()"
  id: "getClassname()"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "getClassname()"
  nameWithType: "Testsuite.Testcase.getClassname()"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getClassname()"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.getClassname*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Gets the value of the classname property."
  syntax:
    content: "public String getClassname()"
    return:
      type: "java.lang.String"
      description: "possible object is\n     <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\">String</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getError()"
  id: "getError()"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "getError()"
  nameWithType: "Testsuite.Testcase.getError()"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getError()"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.getError*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Gets the value of the error property."
  syntax:
    content: "public Testsuite.Testcase.Error getError()"
    return:
      type: "fr.axa.automation.junit.generated.Testsuite.Testcase.Error"
      description: "possible object is\n     <xref uid=\"fr.axa.automation.junit.generated.Testsuite.Testcase.Error\" data-throw-if-not-resolved=\"false\">Testsuite.Testcase.Error</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getFailure()"
  id: "getFailure()"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "getFailure()"
  nameWithType: "Testsuite.Testcase.getFailure()"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getFailure()"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.getFailure*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Gets the value of the failure property."
  syntax:
    content: "public Testsuite.Testcase.Failure getFailure()"
    return:
      type: "fr.axa.automation.junit.generated.Testsuite.Testcase.Failure"
      description: "possible object is\n     <xref uid=\"fr.axa.automation.junit.generated.Testsuite.Testcase.Failure\" data-throw-if-not-resolved=\"false\">Testsuite.Testcase.Failure</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getName()"
  id: "getName()"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "getName()"
  nameWithType: "Testsuite.Testcase.getName()"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getName()"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.getName*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Gets the value of the name property."
  syntax:
    content: "public String getName()"
    return:
      type: "java.lang.String"
      description: "possible object is\n     <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\">String</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getSkipped()"
  id: "getSkipped()"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "getSkipped()"
  nameWithType: "Testsuite.Testcase.getSkipped()"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getSkipped()"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.getSkipped*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Gets the value of the skipped property."
  syntax:
    content: "public Testsuite.Testcase.Skipped getSkipped()"
    return:
      type: "fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped"
      description: "possible object is\n     <xref uid=\"fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped\" data-throw-if-not-resolved=\"false\">Testsuite.Testcase.Skipped</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getTime()"
  id: "getTime()"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "getTime()"
  nameWithType: "Testsuite.Testcase.getTime()"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getTime()"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.getTime*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Gets the value of the time property."
  syntax:
    content: "public BigDecimal getTime()"
    return:
      type: "java.math.BigDecimal"
      description: "possible object is\n     <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\">BigDecimal</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.name"
  id: "name"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "name"
  nameWithType: "Testsuite.Testcase.name"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.name"
  type: "Field"
  package: "fr.axa.automation.junit.generated"
  syntax:
    content: "protected String name"
    return:
      type: "java.lang.String"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setClassname(java.lang.String)"
  id: "setClassname(java.lang.String)"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "setClassname(String value)"
  nameWithType: "Testsuite.Testcase.setClassname(String value)"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setClassname(String value)"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.setClassname*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Sets the value of the classname property."
  syntax:
    content: "public void setClassname(String value)"
    parameters:
    - id: "value"
      type: "java.lang.String"
      description: "allowed object is\n     <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\">String</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setError(fr.axa.automation.junit.generated.Testsuite.Testcase.Error)"
  id: "setError(fr.axa.automation.junit.generated.Testsuite.Testcase.Error)"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "setError(Testsuite.Testcase.Error value)"
  nameWithType: "Testsuite.Testcase.setError(Testsuite.Testcase.Error value)"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setError(Testsuite.Testcase.Error value)"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.setError*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Sets the value of the error property."
  syntax:
    content: "public void setError(Testsuite.Testcase.Error value)"
    parameters:
    - id: "value"
      type: "fr.axa.automation.junit.generated.Testsuite.Testcase.Error"
      description: "allowed object is\n     <xref uid=\"fr.axa.automation.junit.generated.Testsuite.Testcase.Error\" data-throw-if-not-resolved=\"false\">Testsuite.Testcase.Error</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setFailure(fr.axa.automation.junit.generated.Testsuite.Testcase.Failure)"
  id: "setFailure(fr.axa.automation.junit.generated.Testsuite.Testcase.Failure)"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "setFailure(Testsuite.Testcase.Failure value)"
  nameWithType: "Testsuite.Testcase.setFailure(Testsuite.Testcase.Failure value)"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setFailure(Testsuite.Testcase.Failure value)"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.setFailure*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Sets the value of the failure property."
  syntax:
    content: "public void setFailure(Testsuite.Testcase.Failure value)"
    parameters:
    - id: "value"
      type: "fr.axa.automation.junit.generated.Testsuite.Testcase.Failure"
      description: "allowed object is\n     <xref uid=\"fr.axa.automation.junit.generated.Testsuite.Testcase.Failure\" data-throw-if-not-resolved=\"false\">Testsuite.Testcase.Failure</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setName(java.lang.String)"
  id: "setName(java.lang.String)"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "setName(String value)"
  nameWithType: "Testsuite.Testcase.setName(String value)"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setName(String value)"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.setName*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Sets the value of the name property."
  syntax:
    content: "public void setName(String value)"
    parameters:
    - id: "value"
      type: "java.lang.String"
      description: "allowed object is\n     <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\">String</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setSkipped(fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped)"
  id: "setSkipped(fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped)"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "setSkipped(Testsuite.Testcase.Skipped value)"
  nameWithType: "Testsuite.Testcase.setSkipped(Testsuite.Testcase.Skipped value)"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setSkipped(Testsuite.Testcase.Skipped value)"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.setSkipped*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Sets the value of the skipped property."
  syntax:
    content: "public void setSkipped(Testsuite.Testcase.Skipped value)"
    parameters:
    - id: "value"
      type: "fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped"
      description: "allowed object is\n     <xref uid=\"fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped\" data-throw-if-not-resolved=\"false\">Testsuite.Testcase.Skipped</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setTime(java.math.BigDecimal)"
  id: "setTime(java.math.BigDecimal)"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "setTime(BigDecimal value)"
  nameWithType: "Testsuite.Testcase.setTime(BigDecimal value)"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setTime(BigDecimal value)"
  overload: "fr.axa.automation.junit.generated.Testsuite.Testcase.setTime*"
  type: "Method"
  package: "fr.axa.automation.junit.generated"
  summary: "Sets the value of the time property."
  syntax:
    content: "public void setTime(BigDecimal value)"
    parameters:
    - id: "value"
      type: "java.math.BigDecimal"
      description: "allowed object is\n     <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\">BigDecimal</xref>"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.skipped"
  id: "skipped"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "skipped"
  nameWithType: "Testsuite.Testcase.skipped"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.skipped"
  type: "Field"
  package: "fr.axa.automation.junit.generated"
  syntax:
    content: "protected Testsuite.Testcase.Skipped skipped"
    return:
      type: "fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.time"
  id: "time"
  parent: "fr.axa.automation.junit.generated.Testsuite.Testcase"
  langs:
  - "java"
  name: "time"
  nameWithType: "Testsuite.Testcase.time"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.time"
  type: "Field"
  package: "fr.axa.automation.junit.generated"
  syntax:
    content: "protected BigDecimal time"
    return:
      type: "java.math.BigDecimal"
references:
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.Testcase*"
  name: "Testcase"
  nameWithType: "Testsuite.Testcase.Testcase"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.Testcase"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.Failure"
  name: "Testsuite.Testcase.Failure"
  nameWithType: "Testsuite.Testcase.Failure"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.Failure"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getFailure*"
  name: "getFailure"
  nameWithType: "Testsuite.Testcase.getFailure"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getFailure"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setFailure*"
  name: "setFailure"
  nameWithType: "Testsuite.Testcase.setFailure"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setFailure"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.Error"
  name: "Testsuite.Testcase.Error"
  nameWithType: "Testsuite.Testcase.Error"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.Error"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getError*"
  name: "getError"
  nameWithType: "Testsuite.Testcase.getError"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getError"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setError*"
  name: "setError"
  nameWithType: "Testsuite.Testcase.setError"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setError"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped"
  name: "Testsuite.Testcase.Skipped"
  nameWithType: "Testsuite.Testcase.Skipped"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.Skipped"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getSkipped*"
  name: "getSkipped"
  nameWithType: "Testsuite.Testcase.getSkipped"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getSkipped"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setSkipped*"
  name: "setSkipped"
  nameWithType: "Testsuite.Testcase.setSkipped"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setSkipped"
  package: "fr.axa.automation.junit.generated"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getName*"
  name: "getName"
  nameWithType: "Testsuite.Testcase.getName"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getName"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setName*"
  name: "setName"
  nameWithType: "Testsuite.Testcase.setName"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setName"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getClassname*"
  name: "getClassname"
  nameWithType: "Testsuite.Testcase.getClassname"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getClassname"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setClassname*"
  name: "setClassname"
  nameWithType: "Testsuite.Testcase.setClassname"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setClassname"
  package: "fr.axa.automation.junit.generated"
- uid: "java.math.BigDecimal"
  spec.java:
  - uid: "java.math.BigDecimal"
    name: "BigDecimal"
    fullName: "java.math.BigDecimal"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.getTime*"
  name: "getTime"
  nameWithType: "Testsuite.Testcase.getTime"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.getTime"
  package: "fr.axa.automation.junit.generated"
- uid: "fr.axa.automation.junit.generated.Testsuite.Testcase.setTime*"
  name: "setTime"
  nameWithType: "Testsuite.Testcase.setTime"
  fullName: "fr.axa.automation.junit.generated.Testsuite.Testcase.setTime"
  package: "fr.axa.automation.junit.generated"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
