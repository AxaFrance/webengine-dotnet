### YamlMime:ManagedReference
items:
- uid: "fr.axa.automation.webengine.boot.BootProject"
  id: "BootProject"
  parent: "fr.axa.automation.webengine.boot"
  children:
  - "fr.axa.automation.webengine.boot.BootProject.BootProject(fr.axa.automation.webengine.api.ITestSuiteWebExecutor,fr.axa.automation.webengine.report.helper.global.IReportHelper,fr.axa.automation.webengine.logger.ILoggerService,fr.axa.automation.webengine.properties.GlobalConfiguration)"
  - "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionFramework()"
  - "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionProjet()"
  - "fr.axa.automation.webengine.boot.BootProject.getGlobalApplicationContext(org.apache.commons.cli.CommandLine,fr.axa.automation.webengine.core.ITestSuite)"
  - "fr.axa.automation.webengine.boot.BootProject.runTestSuite(org.apache.commons.cli.CommandLine)"
  langs:
  - "java"
  name: "BootProject"
  nameWithType: "BootProject"
  fullName: "fr.axa.automation.webengine.boot.BootProject"
  type: "Class"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "public class BootProject extends AbstractBootProject"
  inheritance:
  - "java.lang.Object"
  - "fr.axa.automation.webengine.boot.AbstractBootProject"
  inheritedMembers:
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework()"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet()"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue(java.util.List<java.lang.String>)"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.loadProject(org.apache.commons.cli.CommandLine)"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.runFromFramework(java.lang.String...)"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.runFromProject(java.lang.String...)"
  - "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite(org.apache.commons.cli.CommandLine)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.webengine.boot.BootProject.BootProject(fr.axa.automation.webengine.api.ITestSuiteWebExecutor,fr.axa.automation.webengine.report.helper.global.IReportHelper,fr.axa.automation.webengine.logger.ILoggerService,fr.axa.automation.webengine.properties.GlobalConfiguration)"
  id: "BootProject(fr.axa.automation.webengine.api.ITestSuiteWebExecutor,fr.axa.automation.webengine.report.helper.global.IReportHelper,fr.axa.automation.webengine.logger.ILoggerService,fr.axa.automation.webengine.properties.GlobalConfiguration)"
  parent: "fr.axa.automation.webengine.boot.BootProject"
  langs:
  - "java"
  name: "BootProject(ITestSuiteWebExecutor testSuiteExecutor, IReportHelper reportHelper, ILoggerService loggerService, GlobalConfiguration globalConfiguration)"
  nameWithType: "BootProject.BootProject(ITestSuiteWebExecutor testSuiteExecutor, IReportHelper reportHelper, ILoggerService loggerService, GlobalConfiguration globalConfiguration)"
  fullName: "fr.axa.automation.webengine.boot.BootProject.BootProject(ITestSuiteWebExecutor testSuiteExecutor, IReportHelper reportHelper, ILoggerService loggerService, GlobalConfiguration globalConfiguration)"
  overload: "fr.axa.automation.webengine.boot.BootProject.BootProject*"
  type: "Constructor"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "public BootProject(ITestSuiteWebExecutor testSuiteExecutor, IReportHelper reportHelper, ILoggerService loggerService, GlobalConfiguration globalConfiguration)"
    parameters:
    - id: "testSuiteExecutor"
      type: "fr.axa.automation.webengine.api.ITestSuiteWebExecutor"
    - id: "reportHelper"
      type: "fr.axa.automation.webengine.report.helper.global.IReportHelper"
    - id: "loggerService"
      type: "fr.axa.automation.webengine.logger.ILoggerService"
    - id: "globalConfiguration"
      type: "fr.axa.automation.webengine.properties.GlobalConfiguration"
- uid: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionFramework()"
  id: "getArgumentOptionFramework()"
  parent: "fr.axa.automation.webengine.boot.BootProject"
  langs:
  - "java"
  name: "getArgumentOptionFramework()"
  nameWithType: "BootProject.getArgumentOptionFramework()"
  fullName: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionFramework()"
  overload: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionFramework*"
  overridden: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework()"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "protected List<ArgumentOption> getArgumentOptionFramework()"
    return:
      type: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
- uid: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionProjet()"
  id: "getArgumentOptionProjet()"
  parent: "fr.axa.automation.webengine.boot.BootProject"
  langs:
  - "java"
  name: "getArgumentOptionProjet()"
  nameWithType: "BootProject.getArgumentOptionProjet()"
  fullName: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionProjet()"
  overload: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionProjet*"
  overridden: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet()"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "protected List<ArgumentOption> getArgumentOptionProjet()"
    return:
      type: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
- uid: "fr.axa.automation.webengine.boot.BootProject.getGlobalApplicationContext(org.apache.commons.cli.CommandLine,fr.axa.automation.webengine.core.ITestSuite)"
  id: "getGlobalApplicationContext(org.apache.commons.cli.CommandLine,fr.axa.automation.webengine.core.ITestSuite)"
  parent: "fr.axa.automation.webengine.boot.BootProject"
  langs:
  - "java"
  name: "getGlobalApplicationContext(CommandLine commandLine, ITestSuite testSuite)"
  nameWithType: "BootProject.getGlobalApplicationContext(CommandLine commandLine, ITestSuite testSuite)"
  fullName: "fr.axa.automation.webengine.boot.BootProject.getGlobalApplicationContext(CommandLine commandLine, ITestSuite testSuite)"
  overload: "fr.axa.automation.webengine.boot.BootProject.getGlobalApplicationContext*"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "public AbstractGlobalApplicationContext getGlobalApplicationContext(CommandLine commandLine, ITestSuite testSuite)"
    parameters:
    - id: "commandLine"
      type: "org.apache.commons.cli.CommandLine"
    - id: "testSuite"
      type: "fr.axa.automation.webengine.core.ITestSuite"
    return:
      type: "fr.axa.automation.webengine.global.AbstractGlobalApplicationContext"
  exceptions:
  - type: "fr.axa.automation.webengine.exception.WebEngineException"
  - type: "java.io.IOException"
- uid: "fr.axa.automation.webengine.boot.BootProject.runTestSuite(org.apache.commons.cli.CommandLine)"
  id: "runTestSuite(org.apache.commons.cli.CommandLine)"
  parent: "fr.axa.automation.webengine.boot.BootProject"
  langs:
  - "java"
  name: "runTestSuite(CommandLine commandLine)"
  nameWithType: "BootProject.runTestSuite(CommandLine commandLine)"
  fullName: "fr.axa.automation.webengine.boot.BootProject.runTestSuite(CommandLine commandLine)"
  overload: "fr.axa.automation.webengine.boot.BootProject.runTestSuite*"
  overridden: "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite(org.apache.commons.cli.CommandLine)"
  type: "Method"
  package: "fr.axa.automation.webengine.boot"
  syntax:
    content: "public void runTestSuite(CommandLine commandLine)"
    parameters:
    - id: "commandLine"
      type: "org.apache.commons.cli.CommandLine"
  exceptions:
  - type: "fr.axa.automation.webengine.exception.WebEngineException"
  - type: "java.io.IOException"
references:
- uid: "fr.axa.automation.webengine.api.ITestSuiteWebExecutor"
  name: "ITestSuiteWebExecutor"
  nameWithType: "ITestSuiteWebExecutor"
  fullName: "fr.axa.automation.webengine.api.ITestSuiteWebExecutor"
- uid: "fr.axa.automation.webengine.report.helper.global.IReportHelper"
  name: "IReportHelper"
  nameWithType: "IReportHelper"
  fullName: "fr.axa.automation.webengine.report.helper.global.IReportHelper"
- uid: "fr.axa.automation.webengine.logger.ILoggerService"
  name: "ILoggerService"
  nameWithType: "ILoggerService"
  fullName: "fr.axa.automation.webengine.logger.ILoggerService"
- uid: "fr.axa.automation.webengine.properties.GlobalConfiguration"
  name: "GlobalConfiguration"
  nameWithType: "GlobalConfiguration"
  fullName: "fr.axa.automation.webengine.properties.GlobalConfiguration"
- uid: "fr.axa.automation.webengine.boot.BootProject.BootProject*"
  name: "BootProject"
  nameWithType: "BootProject.BootProject"
  fullName: "fr.axa.automation.webengine.boot.BootProject.BootProject"
  package: "fr.axa.automation.webengine.boot"
- uid: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "fr.axa.automation.webengine.argument.ArgumentOption"
    name: "ArgumentOption"
    fullName: "fr.axa.automation.webengine.argument.ArgumentOption"
  - name: ">"
    fullName: ">"
- uid: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionFramework*"
  name: "getArgumentOptionFramework"
  nameWithType: "BootProject.getArgumentOptionFramework"
  fullName: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionFramework"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionProjet*"
  name: "getArgumentOptionProjet"
  nameWithType: "BootProject.getArgumentOptionProjet"
  fullName: "fr.axa.automation.webengine.boot.BootProject.getArgumentOptionProjet"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.exception.WebEngineException"
  name: "WebEngineException"
  nameWithType: "WebEngineException"
  fullName: "fr.axa.automation.webengine.exception.WebEngineException"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "org.apache.commons.cli.CommandLine"
  spec.java:
  - uid: "org.apache.commons.cli.CommandLine"
    name: "CommandLine"
    fullName: "org.apache.commons.cli.CommandLine"
- uid: "fr.axa.automation.webengine.boot.BootProject.runTestSuite*"
  name: "runTestSuite"
  nameWithType: "BootProject.runTestSuite"
  fullName: "fr.axa.automation.webengine.boot.BootProject.runTestSuite"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.core.ITestSuite"
  name: "ITestSuite"
  nameWithType: "ITestSuite"
  fullName: "fr.axa.automation.webengine.core.ITestSuite"
- uid: "fr.axa.automation.webengine.global.AbstractGlobalApplicationContext"
  name: "AbstractGlobalApplicationContext"
  nameWithType: "AbstractGlobalApplicationContext"
  fullName: "fr.axa.automation.webengine.global.AbstractGlobalApplicationContext"
- uid: "fr.axa.automation.webengine.boot.BootProject.getGlobalApplicationContext*"
  name: "getGlobalApplicationContext"
  nameWithType: "BootProject.getGlobalApplicationContext"
  fullName: "fr.axa.automation.webengine.boot.BootProject.getGlobalApplicationContext"
  package: "fr.axa.automation.webengine.boot"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject"
  name: "AbstractBootProject"
  nameWithType: "AbstractBootProject"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  name: "AbstractBootProject.getArgumentsForProject(List<ArgumentOption>,String[])"
  nameWithType: "AbstractBootProject.getArgumentsForProject(List<ArgumentOption>,String[])"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet()"
  name: "AbstractBootProject.getArgumentOptionProjet()"
  nameWithType: "AbstractBootProject.getArgumentOptionProjet()"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionProjet()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  name: "AbstractBootProject.getCommandLine(List<ArgumentOption>,String[])"
  nameWithType: "AbstractBootProject.getCommandLine(List<ArgumentOption>,String[])"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite(org.apache.commons.cli.CommandLine)"
  name: "AbstractBootProject.runTestSuite(CommandLine)"
  nameWithType: "AbstractBootProject.runTestSuite(CommandLine)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.runTestSuite(org.apache.commons.cli.CommandLine)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromProject(java.lang.String...)"
  name: "AbstractBootProject.runFromProject(String)"
  nameWithType: "AbstractBootProject.runFromProject(String)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromProject(java.lang.String...)"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromFramework(java.lang.String...)"
  name: "AbstractBootProject.runFromFramework(String)"
  nameWithType: "AbstractBootProject.runFromFramework(String)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.runFromFramework(java.lang.String...)"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue(java.util.List<java.lang.String>)"
  name: "AbstractBootProject.getArgumentsSeparatedByOptionAndValue(List<String>)"
  nameWithType: "AbstractBootProject.getArgumentsSeparatedByOptionAndValue(List<String>)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue(java.util.List<java.lang.String>)"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework()"
  name: "AbstractBootProject.getArgumentOptionFramework()"
  nameWithType: "AbstractBootProject.getArgumentOptionFramework()"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentOptionFramework()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.loadProject(org.apache.commons.cli.CommandLine)"
  name: "AbstractBootProject.loadProject(CommandLine)"
  nameWithType: "AbstractBootProject.loadProject(CommandLine)"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.loadProject(org.apache.commons.cli.CommandLine)"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "fr.axa.automation.webengine.argument.ArgumentOption"
  name: "ArgumentOption"
  nameWithType: "ArgumentOption"
  fullName: "fr.axa.automation.webengine.argument.ArgumentOption"
- uid: "fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
  name: "ArgumentOption>,String[])"
  nameWithType: "ArgumentOption>,String[])"
  fullName: "fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String[])"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject(java.util.List"
  name: "AbstractBootProject.getArgumentsForProject(List"
  nameWithType: "AbstractBootProject.getArgumentsForProject(List"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsForProject(java.util.List"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine(java.util.List"
  name: "AbstractBootProject.getCommandLine(List"
  nameWithType: "AbstractBootProject.getCommandLine(List"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getCommandLine(java.util.List"
- uid: "java.lang.String>)"
  name: "String>)"
  nameWithType: "String>)"
  fullName: "java.lang.String>)"
- uid: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue(java.util.List"
  name: "AbstractBootProject.getArgumentsSeparatedByOptionAndValue(List"
  nameWithType: "AbstractBootProject.getArgumentsSeparatedByOptionAndValue(List"
  fullName: "fr.axa.automation.webengine.boot.AbstractBootProject.getArgumentsSeparatedByOptionAndValue(java.util.List"
