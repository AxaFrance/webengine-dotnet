### YamlMime:ManagedReference
items:
- uid: "fr.axa.automation.webengine.parser.ArgumentParser"
  id: "ArgumentParser"
  parent: "fr.axa.automation.webengine.parser"
  children:
  - "fr.axa.automation.webengine.parser.ArgumentParser.ArgumentParser()"
  - "fr.axa.automation.webengine.parser.ArgumentParser.getOption(fr.axa.automation.webengine.argument.ArgumentOption)"
  - "fr.axa.automation.webengine.parser.ArgumentParser.getOption(java.lang.String[],org.apache.commons.cli.Options)"
  - "fr.axa.automation.webengine.parser.ArgumentParser.getOptionList(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>)"
  - "fr.axa.automation.webengine.parser.ArgumentParser.isOptionForProject(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String)"
  - "fr.axa.automation.webengine.parser.ArgumentParser.removeOptionFromArguments(java.lang.String[],fr.axa.automation.webengine.argument.ArgumentOption)"
  - "fr.axa.automation.webengine.parser.ArgumentParser.removePassWordAfterDecompositionArgs(java.lang.String[])"
  - "fr.axa.automation.webengine.parser.ArgumentParser.splitArguments(java.util.List<java.lang.String>,java.lang.String,int)"
  langs:
  - "java"
  name: "ArgumentParser"
  nameWithType: "ArgumentParser"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser"
  type: "Class"
  package: "fr.axa.automation.webengine.parser"
  syntax:
    content: "public class ArgumentParser"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.ArgumentParser()"
  id: "ArgumentParser()"
  parent: "fr.axa.automation.webengine.parser.ArgumentParser"
  langs:
  - "java"
  name: "ArgumentParser()"
  nameWithType: "ArgumentParser.ArgumentParser()"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.ArgumentParser()"
  overload: "fr.axa.automation.webengine.parser.ArgumentParser.ArgumentParser*"
  type: "Constructor"
  package: "fr.axa.automation.webengine.parser"
  syntax:
    content: "public ArgumentParser()"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.getOption(fr.axa.automation.webengine.argument.ArgumentOption)"
  id: "getOption(fr.axa.automation.webengine.argument.ArgumentOption)"
  parent: "fr.axa.automation.webengine.parser.ArgumentParser"
  langs:
  - "java"
  name: "getOption(ArgumentOption argumentOption)"
  nameWithType: "ArgumentParser.getOption(ArgumentOption argumentOption)"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.getOption(ArgumentOption argumentOption)"
  overload: "fr.axa.automation.webengine.parser.ArgumentParser.getOption*"
  type: "Method"
  package: "fr.axa.automation.webengine.parser"
  syntax:
    content: "public static Option getOption(ArgumentOption argumentOption)"
    parameters:
    - id: "argumentOption"
      type: "fr.axa.automation.webengine.argument.ArgumentOption"
    return:
      type: "org.apache.commons.cli.Option"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.getOption(java.lang.String[],org.apache.commons.cli.Options)"
  id: "getOption(java.lang.String[],org.apache.commons.cli.Options)"
  parent: "fr.axa.automation.webengine.parser.ArgumentParser"
  langs:
  - "java"
  name: "getOption(String[] args, Options options)"
  nameWithType: "ArgumentParser.getOption(String[] args, Options options)"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.getOption(String[] args, Options options)"
  overload: "fr.axa.automation.webengine.parser.ArgumentParser.getOption*"
  type: "Method"
  package: "fr.axa.automation.webengine.parser"
  syntax:
    content: "public static CommandLine getOption(String[] args, Options options)"
    parameters:
    - id: "args"
      type: "java.lang.String[]"
    - id: "options"
      type: "org.apache.commons.cli.Options"
    return:
      type: "org.apache.commons.cli.CommandLine"
  exceptions:
  - type: "org.apache.commons.cli.ParseException"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.getOptionList(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>)"
  id: "getOptionList(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>)"
  parent: "fr.axa.automation.webengine.parser.ArgumentParser"
  langs:
  - "java"
  name: "getOptionList(List<ArgumentOption> argumentOptionList)"
  nameWithType: "ArgumentParser.getOptionList(List<ArgumentOption> argumentOptionList)"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.getOptionList(List<ArgumentOption> argumentOptionList)"
  overload: "fr.axa.automation.webengine.parser.ArgumentParser.getOptionList*"
  type: "Method"
  package: "fr.axa.automation.webengine.parser"
  syntax:
    content: "public static Options getOptionList(List<ArgumentOption> argumentOptionList)"
    parameters:
    - id: "argumentOptionList"
      type: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
    return:
      type: "org.apache.commons.cli.Options"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.isOptionForProject(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String)"
  id: "isOptionForProject(java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>,java.lang.String)"
  parent: "fr.axa.automation.webengine.parser.ArgumentParser"
  langs:
  - "java"
  name: "isOptionForProject(List<ArgumentOption> argumentOptionList, String option)"
  nameWithType: "ArgumentParser.isOptionForProject(List<ArgumentOption> argumentOptionList, String option)"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.isOptionForProject(List<ArgumentOption> argumentOptionList, String option)"
  overload: "fr.axa.automation.webengine.parser.ArgumentParser.isOptionForProject*"
  type: "Method"
  package: "fr.axa.automation.webengine.parser"
  syntax:
    content: "public static boolean isOptionForProject(List<ArgumentOption> argumentOptionList, String option)"
    parameters:
    - id: "argumentOptionList"
      type: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
    - id: "option"
      type: "java.lang.String"
    return:
      type: "boolean"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.removeOptionFromArguments(java.lang.String[],fr.axa.automation.webengine.argument.ArgumentOption)"
  id: "removeOptionFromArguments(java.lang.String[],fr.axa.automation.webengine.argument.ArgumentOption)"
  parent: "fr.axa.automation.webengine.parser.ArgumentParser"
  langs:
  - "java"
  name: "removeOptionFromArguments(String[] args, ArgumentOption argumentOption)"
  nameWithType: "ArgumentParser.removeOptionFromArguments(String[] args, ArgumentOption argumentOption)"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.removeOptionFromArguments(String[] args, ArgumentOption argumentOption)"
  overload: "fr.axa.automation.webengine.parser.ArgumentParser.removeOptionFromArguments*"
  type: "Method"
  package: "fr.axa.automation.webengine.parser"
  syntax:
    content: "public static List<String> removeOptionFromArguments(String[] args, ArgumentOption argumentOption)"
    parameters:
    - id: "args"
      type: "java.lang.String[]"
    - id: "argumentOption"
      type: "fr.axa.automation.webengine.argument.ArgumentOption"
    return:
      type: "java.util.List<java.lang.String>"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.removePassWordAfterDecompositionArgs(java.lang.String[])"
  id: "removePassWordAfterDecompositionArgs(java.lang.String[])"
  parent: "fr.axa.automation.webengine.parser.ArgumentParser"
  langs:
  - "java"
  name: "removePassWordAfterDecompositionArgs(String[] args)"
  nameWithType: "ArgumentParser.removePassWordAfterDecompositionArgs(String[] args)"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.removePassWordAfterDecompositionArgs(String[] args)"
  overload: "fr.axa.automation.webengine.parser.ArgumentParser.removePassWordAfterDecompositionArgs*"
  type: "Method"
  package: "fr.axa.automation.webengine.parser"
  syntax:
    content: "public static List<String> removePassWordAfterDecompositionArgs(String[] args)"
    parameters:
    - id: "args"
      type: "java.lang.String[]"
    return:
      type: "java.util.List<java.lang.String>"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.splitArguments(java.util.List<java.lang.String>,java.lang.String,int)"
  id: "splitArguments(java.util.List<java.lang.String>,java.lang.String,int)"
  parent: "fr.axa.automation.webengine.parser.ArgumentParser"
  langs:
  - "java"
  name: "splitArguments(List<String> args, String regex, int limit)"
  nameWithType: "ArgumentParser.splitArguments(List<String> args, String regex, int limit)"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.splitArguments(List<String> args, String regex, int limit)"
  overload: "fr.axa.automation.webengine.parser.ArgumentParser.splitArguments*"
  type: "Method"
  package: "fr.axa.automation.webengine.parser"
  syntax:
    content: "public static String[] splitArguments(List<String> args, String regex, int limit)"
    parameters:
    - id: "args"
      type: "java.util.List<java.lang.String>"
    - id: "regex"
      type: "java.lang.String"
    - id: "limit"
      type: "int"
    return:
      type: "java.lang.String[]"
references:
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.ArgumentParser*"
  name: "ArgumentParser"
  nameWithType: "ArgumentParser.ArgumentParser"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.ArgumentParser"
  package: "fr.axa.automation.webengine.parser"
- uid: "org.apache.commons.cli.ParseException"
  spec.java:
  - uid: "org.apache.commons.cli.ParseException"
    name: "ParseException"
    fullName: "org.apache.commons.cli.ParseException"
- uid: "java.lang.String[]"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: "[]"
    fullName: "[]"
- uid: "org.apache.commons.cli.Options"
  spec.java:
  - uid: "org.apache.commons.cli.Options"
    name: "Options"
    fullName: "org.apache.commons.cli.Options"
- uid: "org.apache.commons.cli.CommandLine"
  spec.java:
  - uid: "org.apache.commons.cli.CommandLine"
    name: "CommandLine"
    fullName: "org.apache.commons.cli.CommandLine"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.getOption*"
  name: "getOption"
  nameWithType: "ArgumentParser.getOption"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.getOption"
  package: "fr.axa.automation.webengine.parser"
- uid: "java.util.List<fr.axa.automation.webengine.argument.ArgumentOption>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "fr.axa.automation.webengine.argument.ArgumentOption"
    name: "ArgumentOption"
    fullName: "fr.axa.automation.webengine.argument.ArgumentOption"
  - name: ">"
    fullName: ">"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.getOptionList*"
  name: "getOptionList"
  nameWithType: "ArgumentParser.getOptionList"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.getOptionList"
  package: "fr.axa.automation.webengine.parser"
- uid: "fr.axa.automation.webengine.argument.ArgumentOption"
  name: "ArgumentOption"
  nameWithType: "ArgumentOption"
  fullName: "fr.axa.automation.webengine.argument.ArgumentOption"
- uid: "org.apache.commons.cli.Option"
  spec.java:
  - uid: "org.apache.commons.cli.Option"
    name: "Option"
    fullName: "org.apache.commons.cli.Option"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.splitArguments*"
  name: "splitArguments"
  nameWithType: "ArgumentParser.splitArguments"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.splitArguments"
  package: "fr.axa.automation.webengine.parser"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.isOptionForProject*"
  name: "isOptionForProject"
  nameWithType: "ArgumentParser.isOptionForProject"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.isOptionForProject"
  package: "fr.axa.automation.webengine.parser"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.removePassWordAfterDecompositionArgs*"
  name: "removePassWordAfterDecompositionArgs"
  nameWithType: "ArgumentParser.removePassWordAfterDecompositionArgs"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.removePassWordAfterDecompositionArgs"
  package: "fr.axa.automation.webengine.parser"
- uid: "fr.axa.automation.webengine.parser.ArgumentParser.removeOptionFromArguments*"
  name: "removeOptionFromArguments"
  nameWithType: "ArgumentParser.removeOptionFromArguments"
  fullName: "fr.axa.automation.webengine.parser.ArgumentParser.removeOptionFromArguments"
  package: "fr.axa.automation.webengine.parser"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
