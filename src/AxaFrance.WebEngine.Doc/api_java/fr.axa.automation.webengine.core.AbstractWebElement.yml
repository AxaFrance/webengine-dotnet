### YamlMime:ManagedReference
items:
- uid: "fr.axa.automation.webengine.core.AbstractWebElement"
  id: "AbstractWebElement"
  parent: "fr.axa.automation.webengine.core"
  children:
  - "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement(org.openqa.selenium.WebDriver)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.assertInputValue(org.openqa.selenium.WebElement,java.lang.String)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.autocompletion(java.lang.String)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.clear()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.clearWithKey()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.click()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.click(org.openqa.selenium.WebElement)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.existWithoutRetry(int)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.exists()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.exists(java.lang.Integer)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.findElement()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.findElement(int)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.findElement(org.openqa.selenium.By)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.findElement(org.openqa.selenium.By,int)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.findElements()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.findElements(org.openqa.selenium.By)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.getAttribute(java.lang.String)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.getText()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElement()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElements()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.isDisplayed()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.isEnabled()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.isNotDisplayed()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.isNotExists()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.isNotSelected()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.isSelected()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.pressEnterKey()"
  - "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys(java.lang.String)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys(java.lang.String,org.openqa.selenium.WebElement)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.sendKeysWithClear(java.lang.String,org.openqa.selenium.WebElement)"
  - "fr.axa.automation.webengine.core.AbstractWebElement.setValue(java.lang.String)"
  langs:
  - "java"
  name: "AbstractWebElement"
  nameWithType: "AbstractWebElement"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement"
  type: "Class"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public abstract class AbstractWebElement extends AbstractElement"
  inheritance:
  - "java.lang.Object"
  - "fr.axa.automation.webengine.core.AbstractElement"
  inheritedMembers:
  - "fr.axa.automation.webengine.core.AbstractElement.<T,R>retry(fr.axa.automation.webengine.api.IFunction<T,R>,T)"
  - "fr.axa.automation.webengine.core.AbstractElement.<T,R>retry(fr.axa.automation.webengine.api.IFunction<T,R>,T,java.lang.Integer)"
  - "fr.axa.automation.webengine.core.AbstractElement.getScreenshot()"
  - "fr.axa.automation.webengine.core.AbstractElement.internalGetScreenshot()"
  - "fr.axa.automation.webengine.core.AbstractElement.populateDriver(org.openqa.selenium.WebDriver)"
  - "fr.axa.automation.webengine.core.AbstractElement.waitInMillisecondes(java.lang.Long)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement()"
  id: "AbstractWebElement()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "AbstractWebElement()"
  nameWithType: "AbstractWebElement.AbstractWebElement()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement*"
  type: "Constructor"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public AbstractWebElement()"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement(org.openqa.selenium.WebDriver)"
  id: "AbstractWebElement(org.openqa.selenium.WebDriver)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "AbstractWebElement(WebDriver webDriver)"
  nameWithType: "AbstractWebElement.AbstractWebElement(WebDriver webDriver)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement(WebDriver webDriver)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement*"
  type: "Constructor"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public AbstractWebElement(WebDriver webDriver)"
    parameters:
    - id: "webDriver"
      type: "org.openqa.selenium.WebDriver"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.assertInputValue(org.openqa.selenium.WebElement,java.lang.String)"
  id: "assertInputValue(org.openqa.selenium.WebElement,java.lang.String)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "assertInputValue(WebElement webElement, String expectedValue)"
  nameWithType: "AbstractWebElement.assertInputValue(WebElement webElement, String expectedValue)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.assertInputValue(WebElement webElement, String expectedValue)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.assertInputValue*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "protected static void assertInputValue(WebElement webElement, String expectedValue)"
    parameters:
    - id: "webElement"
      type: "org.openqa.selenium.WebElement"
    - id: "expectedValue"
      type: "java.lang.String"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.autocompletion(java.lang.String)"
  id: "autocompletion(java.lang.String)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "autocompletion(String text)"
  nameWithType: "AbstractWebElement.autocompletion(String text)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.autocompletion(String text)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.autocompletion*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public void autocompletion(String text)"
    parameters:
    - id: "text"
      type: "java.lang.String"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.clear()"
  id: "clear()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "clear()"
  nameWithType: "AbstractWebElement.clear()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.clear()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.clear*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public void clear()"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.clearWithKey()"
  id: "clearWithKey()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "clearWithKey()"
  nameWithType: "AbstractWebElement.clearWithKey()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.clearWithKey()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.clearWithKey*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public void clearWithKey()"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.click()"
  id: "click()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "click()"
  nameWithType: "AbstractWebElement.click()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.click()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.click*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public void click()"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.click(org.openqa.selenium.WebElement)"
  id: "click(org.openqa.selenium.WebElement)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "click(WebElement webElement)"
  nameWithType: "AbstractWebElement.click(WebElement webElement)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.click(WebElement webElement)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.click*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "protected void click(WebElement webElement)"
    parameters:
    - id: "webElement"
      type: "org.openqa.selenium.WebElement"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.existWithoutRetry(int)"
  id: "existWithoutRetry(int)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "existWithoutRetry(int timeoutSecond)"
  nameWithType: "AbstractWebElement.existWithoutRetry(int timeoutSecond)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.existWithoutRetry(int timeoutSecond)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.existWithoutRetry*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "protected boolean existWithoutRetry(int timeoutSecond)"
    parameters:
    - id: "timeoutSecond"
      type: "int"
    return:
      type: "boolean"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.exists()"
  id: "exists()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "exists()"
  nameWithType: "AbstractWebElement.exists()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.exists()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.exists*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Boolean exists()"
    return:
      type: "java.lang.Boolean"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.exists(java.lang.Integer)"
  id: "exists(java.lang.Integer)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "exists(Integer timeoutSecond)"
  nameWithType: "AbstractWebElement.exists(Integer timeoutSecond)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.exists(Integer timeoutSecond)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.exists*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Boolean exists(Integer timeoutSecond)"
    parameters:
    - id: "timeoutSecond"
      type: "java.lang.Integer"
    return:
      type: "java.lang.Boolean"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.findElement()"
  id: "findElement()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "findElement()"
  nameWithType: "AbstractWebElement.findElement()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.findElement()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.findElement*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public WebElement findElement()"
    return:
      type: "org.openqa.selenium.WebElement"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.findElement(int)"
  id: "findElement(int)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "findElement(int timeOutSecond)"
  nameWithType: "AbstractWebElement.findElement(int timeOutSecond)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.findElement(int timeOutSecond)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.findElement*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public WebElement findElement(int timeOutSecond)"
    parameters:
    - id: "timeOutSecond"
      type: "int"
    return:
      type: "org.openqa.selenium.WebElement"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.findElement(org.openqa.selenium.By)"
  id: "findElement(org.openqa.selenium.By)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "findElement(By by)"
  nameWithType: "AbstractWebElement.findElement(By by)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.findElement(By by)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.findElement*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public WebElement findElement(By by)"
    parameters:
    - id: "by"
      type: "org.openqa.selenium.By"
    return:
      type: "org.openqa.selenium.WebElement"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.findElement(org.openqa.selenium.By,int)"
  id: "findElement(org.openqa.selenium.By,int)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "findElement(By by, int timeoutSecond)"
  nameWithType: "AbstractWebElement.findElement(By by, int timeoutSecond)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.findElement(By by, int timeoutSecond)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.findElement*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public WebElement findElement(By by, int timeoutSecond)"
    parameters:
    - id: "by"
      type: "org.openqa.selenium.By"
    - id: "timeoutSecond"
      type: "int"
    return:
      type: "org.openqa.selenium.WebElement"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.findElements()"
  id: "findElements()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "findElements()"
  nameWithType: "AbstractWebElement.findElements()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.findElements()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.findElements*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Collection<WebElement> findElements()"
    return:
      type: "java.util.Collection<org.openqa.selenium.WebElement>"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.findElements(org.openqa.selenium.By)"
  id: "findElements(org.openqa.selenium.By)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "findElements(By by)"
  nameWithType: "AbstractWebElement.findElements(By by)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.findElements(By by)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.findElements*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Collection<WebElement> findElements(By by)"
    parameters:
    - id: "by"
      type: "org.openqa.selenium.By"
    return:
      type: "java.util.Collection<org.openqa.selenium.WebElement>"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.getAttribute(java.lang.String)"
  id: "getAttribute(java.lang.String)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "getAttribute(String attributeName)"
  nameWithType: "AbstractWebElement.getAttribute(String attributeName)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.getAttribute(String attributeName)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.getAttribute*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public String getAttribute(String attributeName)"
    parameters:
    - id: "attributeName"
      type: "java.lang.String"
    return:
      type: "java.lang.String"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.getText()"
  id: "getText()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "getText()"
  nameWithType: "AbstractWebElement.getText()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.getText()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.getText*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public String getText()"
    return:
      type: "java.lang.String"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElement()"
  id: "internalFindElement()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "internalFindElement()"
  nameWithType: "AbstractWebElement.internalFindElement()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElement()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElement*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "protected abstract WebElement internalFindElement()"
    return:
      type: "org.openqa.selenium.WebElement"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElements()"
  id: "internalFindElements()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "internalFindElements()"
  nameWithType: "AbstractWebElement.internalFindElements()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElements()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElements*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public abstract Collection<WebElement> internalFindElements()"
    return:
      type: "java.util.Collection<org.openqa.selenium.WebElement>"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isDisplayed()"
  id: "isDisplayed()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "isDisplayed()"
  nameWithType: "AbstractWebElement.isDisplayed()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isDisplayed()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.isDisplayed*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Boolean isDisplayed()"
    return:
      type: "java.lang.Boolean"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isEnabled()"
  id: "isEnabled()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "isEnabled()"
  nameWithType: "AbstractWebElement.isEnabled()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isEnabled()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.isEnabled*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Boolean isEnabled()"
    return:
      type: "java.lang.Boolean"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isNotDisplayed()"
  id: "isNotDisplayed()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "isNotDisplayed()"
  nameWithType: "AbstractWebElement.isNotDisplayed()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isNotDisplayed()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.isNotDisplayed*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Boolean isNotDisplayed()"
    return:
      type: "java.lang.Boolean"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isNotExists()"
  id: "isNotExists()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "isNotExists()"
  nameWithType: "AbstractWebElement.isNotExists()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isNotExists()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.isNotExists*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Boolean isNotExists()"
    return:
      type: "java.lang.Boolean"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isNotSelected()"
  id: "isNotSelected()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "isNotSelected()"
  nameWithType: "AbstractWebElement.isNotSelected()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isNotSelected()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.isNotSelected*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Boolean isNotSelected()"
    return:
      type: "java.lang.Boolean"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isSelected()"
  id: "isSelected()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "isSelected()"
  nameWithType: "AbstractWebElement.isSelected()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isSelected()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.isSelected*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public Boolean isSelected()"
    return:
      type: "java.lang.Boolean"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.pressEnterKey()"
  id: "pressEnterKey()"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "pressEnterKey()"
  nameWithType: "AbstractWebElement.pressEnterKey()"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.pressEnterKey()"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.pressEnterKey*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public void pressEnterKey()"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys(java.lang.String)"
  id: "sendKeys(java.lang.String)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "sendKeys(String text)"
  nameWithType: "AbstractWebElement.sendKeys(String text)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys(String text)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public void sendKeys(String text)"
    parameters:
    - id: "text"
      type: "java.lang.String"
  exceptions:
  - type: "java.lang.Exception"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys(java.lang.String,org.openqa.selenium.WebElement)"
  id: "sendKeys(java.lang.String,org.openqa.selenium.WebElement)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "sendKeys(String sendKeysValue, WebElement webElement)"
  nameWithType: "AbstractWebElement.sendKeys(String sendKeysValue, WebElement webElement)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys(String sendKeysValue, WebElement webElement)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "protected void sendKeys(String sendKeysValue, WebElement webElement)"
    parameters:
    - id: "sendKeysValue"
      type: "java.lang.String"
    - id: "webElement"
      type: "org.openqa.selenium.WebElement"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeysWithClear(java.lang.String,org.openqa.selenium.WebElement)"
  id: "sendKeysWithClear(java.lang.String,org.openqa.selenium.WebElement)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "sendKeysWithClear(String sendKeysValue, WebElement webElement)"
  nameWithType: "AbstractWebElement.sendKeysWithClear(String sendKeysValue, WebElement webElement)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeysWithClear(String sendKeysValue, WebElement webElement)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeysWithClear*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "protected void sendKeysWithClear(String sendKeysValue, WebElement webElement)"
    parameters:
    - id: "sendKeysValue"
      type: "java.lang.String"
    - id: "webElement"
      type: "org.openqa.selenium.WebElement"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.setValue(java.lang.String)"
  id: "setValue(java.lang.String)"
  parent: "fr.axa.automation.webengine.core.AbstractWebElement"
  langs:
  - "java"
  name: "setValue(String text)"
  nameWithType: "AbstractWebElement.setValue(String text)"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.setValue(String text)"
  overload: "fr.axa.automation.webengine.core.AbstractWebElement.setValue*"
  type: "Method"
  package: "fr.axa.automation.webengine.core"
  syntax:
    content: "public void setValue(String text)"
    parameters:
    - id: "text"
      type: "java.lang.String"
  exceptions:
  - type: "java.lang.Exception"
references:
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement*"
  name: "AbstractWebElement"
  nameWithType: "AbstractWebElement.AbstractWebElement"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.AbstractWebElement"
  package: "fr.axa.automation.webengine.core"
- uid: "org.openqa.selenium.WebDriver"
  spec.java:
  - uid: "org.openqa.selenium.WebDriver"
    name: "WebDriver"
    fullName: "org.openqa.selenium.WebDriver"
- uid: "java.lang.Exception"
  spec.java:
  - uid: "java.lang.Exception"
    name: "Exception"
    fullName: "java.lang.Exception"
- uid: "org.openqa.selenium.WebElement"
  spec.java:
  - uid: "org.openqa.selenium.WebElement"
    name: "WebElement"
    fullName: "org.openqa.selenium.WebElement"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElement*"
  name: "internalFindElement"
  nameWithType: "AbstractWebElement.internalFindElement"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElement"
  package: "fr.axa.automation.webengine.core"
- uid: "java.util.Collection<org.openqa.selenium.WebElement>"
  spec.java:
  - uid: "java.util.Collection"
    name: "Collection"
    fullName: "java.util.Collection"
  - name: "<"
    fullName: "<"
  - uid: "org.openqa.selenium.WebElement"
    name: "WebElement"
    fullName: "org.openqa.selenium.WebElement"
  - name: ">"
    fullName: ">"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElements*"
  name: "internalFindElements"
  nameWithType: "AbstractWebElement.internalFindElements"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.internalFindElements"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.findElement*"
  name: "findElement"
  nameWithType: "AbstractWebElement.findElement"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.findElement"
  package: "fr.axa.automation.webengine.core"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "org.openqa.selenium.By"
  spec.java:
  - uid: "org.openqa.selenium.By"
    name: "By"
    fullName: "org.openqa.selenium.By"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.findElements*"
  name: "findElements"
  nameWithType: "AbstractWebElement.findElements"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.findElements"
  package: "fr.axa.automation.webengine.core"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isNotExists*"
  name: "isNotExists"
  nameWithType: "AbstractWebElement.isNotExists"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isNotExists"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.exists*"
  name: "exists"
  nameWithType: "AbstractWebElement.exists"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.exists"
  package: "fr.axa.automation.webengine.core"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.existWithoutRetry*"
  name: "existWithoutRetry"
  nameWithType: "AbstractWebElement.existWithoutRetry"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.existWithoutRetry"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.click*"
  name: "click"
  nameWithType: "AbstractWebElement.click"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.click"
  package: "fr.axa.automation.webengine.core"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.autocompletion*"
  name: "autocompletion"
  nameWithType: "AbstractWebElement.autocompletion"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.autocompletion"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.pressEnterKey*"
  name: "pressEnterKey"
  nameWithType: "AbstractWebElement.pressEnterKey"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.pressEnterKey"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys*"
  name: "sendKeys"
  nameWithType: "AbstractWebElement.sendKeys"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeys"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeysWithClear*"
  name: "sendKeysWithClear"
  nameWithType: "AbstractWebElement.sendKeysWithClear"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.sendKeysWithClear"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.setValue*"
  name: "setValue"
  nameWithType: "AbstractWebElement.setValue"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.setValue"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.getText*"
  name: "getText"
  nameWithType: "AbstractWebElement.getText"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.getText"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isNotSelected*"
  name: "isNotSelected"
  nameWithType: "AbstractWebElement.isNotSelected"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isNotSelected"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isSelected*"
  name: "isSelected"
  nameWithType: "AbstractWebElement.isSelected"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isSelected"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isEnabled*"
  name: "isEnabled"
  nameWithType: "AbstractWebElement.isEnabled"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isEnabled"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isNotDisplayed*"
  name: "isNotDisplayed"
  nameWithType: "AbstractWebElement.isNotDisplayed"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isNotDisplayed"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.isDisplayed*"
  name: "isDisplayed"
  nameWithType: "AbstractWebElement.isDisplayed"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.isDisplayed"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.assertInputValue*"
  name: "assertInputValue"
  nameWithType: "AbstractWebElement.assertInputValue"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.assertInputValue"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.clear*"
  name: "clear"
  nameWithType: "AbstractWebElement.clear"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.clear"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.clearWithKey*"
  name: "clearWithKey"
  nameWithType: "AbstractWebElement.clearWithKey"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.clearWithKey"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractWebElement.getAttribute*"
  name: "getAttribute"
  nameWithType: "AbstractWebElement.getAttribute"
  fullName: "fr.axa.automation.webengine.core.AbstractWebElement.getAttribute"
  package: "fr.axa.automation.webengine.core"
- uid: "fr.axa.automation.webengine.core.AbstractElement"
  name: "AbstractElement"
  nameWithType: "AbstractElement"
  fullName: "fr.axa.automation.webengine.core.AbstractElement"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "fr.axa.automation.webengine.core.AbstractElement.<T,R>retry(fr.axa.automation.webengine.api.IFunction<T,R>,T)"
  name: "AbstractElement.<T,R>retry(IFunction<T,R>,T)"
  nameWithType: "AbstractElement.<T,R>retry(IFunction<T,R>,T)"
  fullName: "fr.axa.automation.webengine.core.AbstractElement.<T,R>retry(fr.axa.automation.webengine.api.IFunction<T,R>,T)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "fr.axa.automation.webengine.core.AbstractElement.getScreenshot()"
  name: "AbstractElement.getScreenshot()"
  nameWithType: "AbstractElement.getScreenshot()"
  fullName: "fr.axa.automation.webengine.core.AbstractElement.getScreenshot()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "fr.axa.automation.webengine.core.AbstractElement.<T,R>retry(fr.axa.automation.webengine.api.IFunction<T,R>,T,java.lang.Integer)"
  name: "AbstractElement.<T,R>retry(IFunction<T,R>,T,Integer)"
  nameWithType: "AbstractElement.<T,R>retry(IFunction<T,R>,T,Integer)"
  fullName: "fr.axa.automation.webengine.core.AbstractElement.<T,R>retry(fr.axa.automation.webengine.api.IFunction<T,R>,T,java.lang.Integer)"
- uid: "fr.axa.automation.webengine.core.AbstractElement.populateDriver(org.openqa.selenium.WebDriver)"
  name: "AbstractElement.populateDriver(WebDriver)"
  nameWithType: "AbstractElement.populateDriver(WebDriver)"
  fullName: "fr.axa.automation.webengine.core.AbstractElement.populateDriver(org.openqa.selenium.WebDriver)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "fr.axa.automation.webengine.core.AbstractElement.waitInMillisecondes(java.lang.Long)"
  name: "AbstractElement.waitInMillisecondes(Long)"
  nameWithType: "AbstractElement.waitInMillisecondes(Long)"
  fullName: "fr.axa.automation.webengine.core.AbstractElement.waitInMillisecondes(java.lang.Long)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.webengine.core.AbstractElement.internalGetScreenshot()"
  name: "AbstractElement.internalGetScreenshot()"
  nameWithType: "AbstractElement.internalGetScreenshot()"
  fullName: "fr.axa.automation.webengine.core.AbstractElement.internalGetScreenshot()"
- uid: "java.util.Collection"
  name: "Collection"
  nameWithType: "Collection"
  fullName: "java.util.Collection"
- uid: "fr.axa.automation.webengine.core.AbstractElement."
  name: "AbstractElement."
  nameWithType: "AbstractElement."
  fullName: "fr.axa.automation.webengine.core.AbstractElement."
- uid: "T,R>retry(fr.axa.automation.webengine.api.IFunction"
  name: "T,R>retry(IFunction"
  nameWithType: "T,R>retry(IFunction"
  fullName: "T,R>retry(fr.axa.automation.webengine.api.IFunction"
- uid: "T,R>,T)"
  name: "T,R>,T)"
  nameWithType: "T,R>,T)"
  fullName: "T,R>,T)"
- uid: "T,R>,T,java.lang.Integer)"
  name: "T,R>,T,Integer)"
  nameWithType: "T,R>,T,Integer)"
  fullName: "T,R>,T,java.lang.Integer)"
