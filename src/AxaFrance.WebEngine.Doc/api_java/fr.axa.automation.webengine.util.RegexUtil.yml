### YamlMime:ManagedReference
items:
- uid: "fr.axa.automation.webengine.util.RegexUtil"
  id: "RegexUtil"
  parent: "fr.axa.automation.webengine.util"
  children:
  - "fr.axa.automation.webengine.util.RegexUtil.RegexUtil()"
  - "fr.axa.automation.webengine.util.RegexUtil.findFirst(java.lang.String,java.lang.String)"
  - "fr.axa.automation.webengine.util.RegexUtil.getNumber(java.lang.String,java.lang.String)"
  - "fr.axa.automation.webengine.util.RegexUtil.match(java.lang.String,java.lang.String)"
  langs:
  - "java"
  name: "RegexUtil"
  nameWithType: "RegexUtil"
  fullName: "fr.axa.automation.webengine.util.RegexUtil"
  type: "Class"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public final class RegexUtil"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.webengine.util.RegexUtil.RegexUtil()"
  id: "RegexUtil()"
  parent: "fr.axa.automation.webengine.util.RegexUtil"
  langs:
  - "java"
  name: "RegexUtil()"
  nameWithType: "RegexUtil.RegexUtil()"
  fullName: "fr.axa.automation.webengine.util.RegexUtil.RegexUtil()"
  overload: "fr.axa.automation.webengine.util.RegexUtil.RegexUtil*"
  type: "Constructor"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public RegexUtil()"
- uid: "fr.axa.automation.webengine.util.RegexUtil.findFirst(java.lang.String,java.lang.String)"
  id: "findFirst(java.lang.String,java.lang.String)"
  parent: "fr.axa.automation.webengine.util.RegexUtil"
  langs:
  - "java"
  name: "findFirst(String patternExpression, String matchExpression)"
  nameWithType: "RegexUtil.findFirst(String patternExpression, String matchExpression)"
  fullName: "fr.axa.automation.webengine.util.RegexUtil.findFirst(String patternExpression, String matchExpression)"
  overload: "fr.axa.automation.webengine.util.RegexUtil.findFirst*"
  type: "Method"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static Optional<String> findFirst(String patternExpression, String matchExpression)"
    parameters:
    - id: "patternExpression"
      type: "java.lang.String"
    - id: "matchExpression"
      type: "java.lang.String"
    return:
      type: "java.util.Optional<java.lang.String>"
- uid: "fr.axa.automation.webengine.util.RegexUtil.getNumber(java.lang.String,java.lang.String)"
  id: "getNumber(java.lang.String,java.lang.String)"
  parent: "fr.axa.automation.webengine.util.RegexUtil"
  langs:
  - "java"
  name: "getNumber(String regex, String value)"
  nameWithType: "RegexUtil.getNumber(String regex, String value)"
  fullName: "fr.axa.automation.webengine.util.RegexUtil.getNumber(String regex, String value)"
  overload: "fr.axa.automation.webengine.util.RegexUtil.getNumber*"
  type: "Method"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static Integer getNumber(String regex, String value)"
    parameters:
    - id: "regex"
      type: "java.lang.String"
    - id: "value"
      type: "java.lang.String"
    return:
      type: "java.lang.Integer"
- uid: "fr.axa.automation.webengine.util.RegexUtil.match(java.lang.String,java.lang.String)"
  id: "match(java.lang.String,java.lang.String)"
  parent: "fr.axa.automation.webengine.util.RegexUtil"
  langs:
  - "java"
  name: "match(String patternExpression, String matchExpression)"
  nameWithType: "RegexUtil.match(String patternExpression, String matchExpression)"
  fullName: "fr.axa.automation.webengine.util.RegexUtil.match(String patternExpression, String matchExpression)"
  overload: "fr.axa.automation.webengine.util.RegexUtil.match*"
  type: "Method"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static List<String> match(String patternExpression, String matchExpression)"
    parameters:
    - id: "patternExpression"
      type: "java.lang.String"
    - id: "matchExpression"
      type: "java.lang.String"
    return:
      type: "java.util.List<java.lang.String>"
references:
- uid: "fr.axa.automation.webengine.util.RegexUtil.RegexUtil*"
  name: "RegexUtil"
  nameWithType: "RegexUtil.RegexUtil"
  fullName: "fr.axa.automation.webengine.util.RegexUtil.RegexUtil"
  package: "fr.axa.automation.webengine.util"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "fr.axa.automation.webengine.util.RegexUtil.match*"
  name: "match"
  nameWithType: "RegexUtil.match"
  fullName: "fr.axa.automation.webengine.util.RegexUtil.match"
  package: "fr.axa.automation.webengine.util"
- uid: "java.util.Optional<java.lang.String>"
  spec.java:
  - uid: "java.util.Optional"
    name: "Optional"
    fullName: "java.util.Optional"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "fr.axa.automation.webengine.util.RegexUtil.findFirst*"
  name: "findFirst"
  nameWithType: "RegexUtil.findFirst"
  fullName: "fr.axa.automation.webengine.util.RegexUtil.findFirst"
  package: "fr.axa.automation.webengine.util"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "fr.axa.automation.webengine.util.RegexUtil.getNumber*"
  name: "getNumber"
  nameWithType: "RegexUtil.getNumber"
  fullName: "fr.axa.automation.webengine.util.RegexUtil.getNumber"
  package: "fr.axa.automation.webengine.util"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "java.util.Optional"
  name: "Optional"
  nameWithType: "Optional"
  fullName: "java.util.Optional"
