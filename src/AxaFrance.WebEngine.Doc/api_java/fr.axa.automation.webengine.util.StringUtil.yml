### YamlMime:ManagedReference
items:
- uid: "fr.axa.automation.webengine.util.StringUtil"
  id: "StringUtil"
  parent: "fr.axa.automation.webengine.util"
  children:
  - "fr.axa.automation.webengine.util.StringUtil.CHARACTERS_TO_REPLACE"
  - "fr.axa.automation.webengine.util.StringUtil.DOUBLE_TWO_POINTS"
  - "fr.axa.automation.webengine.util.StringUtil.EMPTY"
  - "fr.axa.automation.webengine.util.StringUtil.UNDERSCORE"
  - "fr.axa.automation.webengine.util.StringUtil.contains(java.lang.String,java.lang.String)"
  - "fr.axa.automation.webengine.util.StringUtil.equalsIgnoreCase(java.lang.String,java.lang.String)"
  - "fr.axa.automation.webengine.util.StringUtil.getNormalizeString(java.lang.String[],java.lang.String)"
  - "fr.axa.automation.webengine.util.StringUtil.removeSpecialCharacters(java.lang.String)"
  langs:
  - "java"
  name: "StringUtil"
  nameWithType: "StringUtil"
  fullName: "fr.axa.automation.webengine.util.StringUtil"
  type: "Class"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public final class StringUtil"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.webengine.util.StringUtil.CHARACTERS_TO_REPLACE"
  id: "CHARACTERS_TO_REPLACE"
  parent: "fr.axa.automation.webengine.util.StringUtil"
  langs:
  - "java"
  name: "CHARACTERS_TO_REPLACE"
  nameWithType: "StringUtil.CHARACTERS_TO_REPLACE"
  fullName: "fr.axa.automation.webengine.util.StringUtil.CHARACTERS_TO_REPLACE"
  type: "Field"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static final String CHARACTERS_TO_REPLACE"
    return:
      type: "java.lang.String"
- uid: "fr.axa.automation.webengine.util.StringUtil.DOUBLE_TWO_POINTS"
  id: "DOUBLE_TWO_POINTS"
  parent: "fr.axa.automation.webengine.util.StringUtil"
  langs:
  - "java"
  name: "DOUBLE_TWO_POINTS"
  nameWithType: "StringUtil.DOUBLE_TWO_POINTS"
  fullName: "fr.axa.automation.webengine.util.StringUtil.DOUBLE_TWO_POINTS"
  type: "Field"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static final String DOUBLE_TWO_POINTS"
    return:
      type: "java.lang.String"
- uid: "fr.axa.automation.webengine.util.StringUtil.EMPTY"
  id: "EMPTY"
  parent: "fr.axa.automation.webengine.util.StringUtil"
  langs:
  - "java"
  name: "EMPTY"
  nameWithType: "StringUtil.EMPTY"
  fullName: "fr.axa.automation.webengine.util.StringUtil.EMPTY"
  type: "Field"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static final String EMPTY"
    return:
      type: "java.lang.String"
- uid: "fr.axa.automation.webengine.util.StringUtil.StringUtil()"
  id: "StringUtil()"
  parent: "fr.axa.automation.webengine.util.StringUtil"
  langs:
  - "java"
  name: "StringUtil()"
  nameWithType: "StringUtil.StringUtil()"
  fullName: "fr.axa.automation.webengine.util.StringUtil.StringUtil()"
  overload: "fr.axa.automation.webengine.util.StringUtil.StringUtil*"
  type: "Constructor"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "private StringUtil()"
- uid: "fr.axa.automation.webengine.util.StringUtil.UNDERSCORE"
  id: "UNDERSCORE"
  parent: "fr.axa.automation.webengine.util.StringUtil"
  langs:
  - "java"
  name: "UNDERSCORE"
  nameWithType: "StringUtil.UNDERSCORE"
  fullName: "fr.axa.automation.webengine.util.StringUtil.UNDERSCORE"
  type: "Field"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static final String UNDERSCORE"
    return:
      type: "java.lang.String"
- uid: "fr.axa.automation.webengine.util.StringUtil.contains(java.lang.String,java.lang.String)"
  id: "contains(java.lang.String,java.lang.String)"
  parent: "fr.axa.automation.webengine.util.StringUtil"
  langs:
  - "java"
  name: "contains(String value1, String value2)"
  nameWithType: "StringUtil.contains(String value1, String value2)"
  fullName: "fr.axa.automation.webengine.util.StringUtil.contains(String value1, String value2)"
  overload: "fr.axa.automation.webengine.util.StringUtil.contains*"
  type: "Method"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static boolean contains(String value1, String value2)"
    parameters:
    - id: "value1"
      type: "java.lang.String"
    - id: "value2"
      type: "java.lang.String"
    return:
      type: "boolean"
- uid: "fr.axa.automation.webengine.util.StringUtil.equalsIgnoreCase(java.lang.String,java.lang.String)"
  id: "equalsIgnoreCase(java.lang.String,java.lang.String)"
  parent: "fr.axa.automation.webengine.util.StringUtil"
  langs:
  - "java"
  name: "equalsIgnoreCase(String value1, String value2)"
  nameWithType: "StringUtil.equalsIgnoreCase(String value1, String value2)"
  fullName: "fr.axa.automation.webengine.util.StringUtil.equalsIgnoreCase(String value1, String value2)"
  overload: "fr.axa.automation.webengine.util.StringUtil.equalsIgnoreCase*"
  type: "Method"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static boolean equalsIgnoreCase(String value1, String value2)"
    parameters:
    - id: "value1"
      type: "java.lang.String"
    - id: "value2"
      type: "java.lang.String"
    return:
      type: "boolean"
- uid: "fr.axa.automation.webengine.util.StringUtil.getNormalizeString(java.lang.String[],java.lang.String)"
  id: "getNormalizeString(java.lang.String[],java.lang.String)"
  parent: "fr.axa.automation.webengine.util.StringUtil"
  langs:
  - "java"
  name: "getNormalizeString(String[] name, String delimiter)"
  nameWithType: "StringUtil.getNormalizeString(String[] name, String delimiter)"
  fullName: "fr.axa.automation.webengine.util.StringUtil.getNormalizeString(String[] name, String delimiter)"
  overload: "fr.axa.automation.webengine.util.StringUtil.getNormalizeString*"
  type: "Method"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static String getNormalizeString(String[] name, String delimiter)"
    parameters:
    - id: "name"
      type: "java.lang.String[]"
    - id: "delimiter"
      type: "java.lang.String"
    return:
      type: "java.lang.String"
- uid: "fr.axa.automation.webengine.util.StringUtil.removeSpecialCharacters(java.lang.String)"
  id: "removeSpecialCharacters(java.lang.String)"
  parent: "fr.axa.automation.webengine.util.StringUtil"
  langs:
  - "java"
  name: "removeSpecialCharacters(String text)"
  nameWithType: "StringUtil.removeSpecialCharacters(String text)"
  fullName: "fr.axa.automation.webengine.util.StringUtil.removeSpecialCharacters(String text)"
  overload: "fr.axa.automation.webengine.util.StringUtil.removeSpecialCharacters*"
  type: "Method"
  package: "fr.axa.automation.webengine.util"
  syntax:
    content: "public static String removeSpecialCharacters(String text)"
    parameters:
    - id: "text"
      type: "java.lang.String"
    return:
      type: "java.lang.String"
references:
- uid: "fr.axa.automation.webengine.util.StringUtil.StringUtil*"
  name: "StringUtil"
  nameWithType: "StringUtil.StringUtil"
  fullName: "fr.axa.automation.webengine.util.StringUtil.StringUtil"
  package: "fr.axa.automation.webengine.util"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "fr.axa.automation.webengine.util.StringUtil.equalsIgnoreCase*"
  name: "equalsIgnoreCase"
  nameWithType: "StringUtil.equalsIgnoreCase"
  fullName: "fr.axa.automation.webengine.util.StringUtil.equalsIgnoreCase"
  package: "fr.axa.automation.webengine.util"
- uid: "fr.axa.automation.webengine.util.StringUtil.contains*"
  name: "contains"
  nameWithType: "StringUtil.contains"
  fullName: "fr.axa.automation.webengine.util.StringUtil.contains"
  package: "fr.axa.automation.webengine.util"
- uid: "fr.axa.automation.webengine.util.StringUtil.removeSpecialCharacters*"
  name: "removeSpecialCharacters"
  nameWithType: "StringUtil.removeSpecialCharacters"
  fullName: "fr.axa.automation.webengine.util.StringUtil.removeSpecialCharacters"
  package: "fr.axa.automation.webengine.util"
- uid: "java.lang.String[]"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: "[]"
    fullName: "[]"
- uid: "fr.axa.automation.webengine.util.StringUtil.getNormalizeString*"
  name: "getNormalizeString"
  nameWithType: "StringUtil.getNormalizeString"
  fullName: "fr.axa.automation.webengine.util.StringUtil.getNormalizeString"
  package: "fr.axa.automation.webengine.util"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
