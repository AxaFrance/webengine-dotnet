### YamlMime:ManagedReference
items:
- uid: "fr.axa.automation.webengine.tree.TreeNode"
  id: "TreeNode"
  parent: "fr.axa.automation.webengine.tree"
  children:
  - "fr.axa.automation.webengine.tree.TreeNode.TreeNode(T)"
  - "fr.axa.automation.webengine.tree.TreeNode.addChild(T)"
  - "fr.axa.automation.webengine.tree.TreeNode.addChildren(java.util.List<fr.axa.automation.webengine.tree.TreeNode<T>>)"
  - "fr.axa.automation.webengine.tree.TreeNode.deleteNode()"
  - "fr.axa.automation.webengine.tree.TreeNode.deleteRootNode()"
  - "fr.axa.automation.webengine.tree.TreeNode.printTree(java.lang.String,fr.axa.automation.webengine.tree.TreeNode)"
  langs:
  - "java"
  name: "TreeNode<T>"
  nameWithType: "TreeNode<T>"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>"
  type: "Class"
  package: "fr.axa.automation.webengine.tree"
  syntax:
    content: "public class TreeNode<T>"
    typeParameters:
    - id: "T"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fr.axa.automation.webengine.tree.TreeNode.TreeNode(T)"
  id: "TreeNode(T)"
  parent: "fr.axa.automation.webengine.tree.TreeNode"
  langs:
  - "java"
  name: "TreeNode(T data)"
  nameWithType: "TreeNode<T>.TreeNode(T data)"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.TreeNode(T data)"
  overload: "fr.axa.automation.webengine.tree.TreeNode.TreeNode*"
  type: "Constructor"
  package: "fr.axa.automation.webengine.tree"
  syntax:
    content: "public TreeNode(T data)"
    parameters:
    - id: "data"
      type: "T"
- uid: "fr.axa.automation.webengine.tree.TreeNode.addChild(T)"
  id: "addChild(T)"
  parent: "fr.axa.automation.webengine.tree.TreeNode"
  langs:
  - "java"
  name: "addChild(T child)"
  nameWithType: "TreeNode<T>.addChild(T child)"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.addChild(T child)"
  overload: "fr.axa.automation.webengine.tree.TreeNode.addChild*"
  type: "Method"
  package: "fr.axa.automation.webengine.tree"
  syntax:
    content: "public TreeNode<T> addChild(T child)"
    parameters:
    - id: "child"
      type: "T"
    return:
      type: "fr.axa.automation.webengine.tree.TreeNode<T>"
- uid: "fr.axa.automation.webengine.tree.TreeNode.addChildren(java.util.List<fr.axa.automation.webengine.tree.TreeNode<T>>)"
  id: "addChildren(java.util.List<fr.axa.automation.webengine.tree.TreeNode<T>>)"
  parent: "fr.axa.automation.webengine.tree.TreeNode"
  langs:
  - "java"
  name: "addChildren(List<TreeNode<T>> children)"
  nameWithType: "TreeNode<T>.addChildren(List<TreeNode<T>> children)"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.addChildren(List<TreeNode<T>> children)"
  overload: "fr.axa.automation.webengine.tree.TreeNode.addChildren*"
  type: "Method"
  package: "fr.axa.automation.webengine.tree"
  syntax:
    content: "public void addChildren(List<TreeNode<T>> children)"
    parameters:
    - id: "children"
      type: "java.util.List<fr.axa.automation.webengine.tree.TreeNode<T>>"
- uid: "fr.axa.automation.webengine.tree.TreeNode.deleteNode()"
  id: "deleteNode()"
  parent: "fr.axa.automation.webengine.tree.TreeNode"
  langs:
  - "java"
  name: "deleteNode()"
  nameWithType: "TreeNode<T>.deleteNode()"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.deleteNode()"
  overload: "fr.axa.automation.webengine.tree.TreeNode.deleteNode*"
  type: "Method"
  package: "fr.axa.automation.webengine.tree"
  syntax:
    content: "public void deleteNode()"
- uid: "fr.axa.automation.webengine.tree.TreeNode.deleteRootNode()"
  id: "deleteRootNode()"
  parent: "fr.axa.automation.webengine.tree.TreeNode"
  langs:
  - "java"
  name: "deleteRootNode()"
  nameWithType: "TreeNode<T>.deleteRootNode()"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.deleteRootNode()"
  overload: "fr.axa.automation.webengine.tree.TreeNode.deleteRootNode*"
  type: "Method"
  package: "fr.axa.automation.webengine.tree"
  syntax:
    content: "public TreeNode<T> deleteRootNode()"
    return:
      type: "fr.axa.automation.webengine.tree.TreeNode<T>"
- uid: "fr.axa.automation.webengine.tree.TreeNode.printTree(java.lang.String,fr.axa.automation.webengine.tree.TreeNode)"
  id: "printTree(java.lang.String,fr.axa.automation.webengine.tree.TreeNode)"
  parent: "fr.axa.automation.webengine.tree.TreeNode"
  langs:
  - "java"
  name: "printTree(String prefixe, TreeNode node)"
  nameWithType: "TreeNode<T>.printTree(String prefixe, TreeNode node)"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.printTree(String prefixe, TreeNode node)"
  overload: "fr.axa.automation.webengine.tree.TreeNode.printTree*"
  type: "Method"
  package: "fr.axa.automation.webengine.tree"
  syntax:
    content: "public void printTree(String prefixe, TreeNode node)"
    parameters:
    - id: "prefixe"
      type: "java.lang.String"
    - id: "node"
      type: "fr.axa.automation.webengine.tree.TreeNode"
references:
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "fr.axa.automation.webengine.tree.TreeNode.TreeNode*"
  name: "TreeNode"
  nameWithType: "TreeNode<T>.TreeNode"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.TreeNode"
  package: "fr.axa.automation.webengine.tree"
- uid: "fr.axa.automation.webengine.tree.TreeNode<T>"
  spec.java:
  - uid: "fr.axa.automation.webengine.tree.TreeNode"
    name: "TreeNode"
    fullName: "fr.axa.automation.webengine.tree.TreeNode"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "fr.axa.automation.webengine.tree.TreeNode.addChild*"
  name: "addChild"
  nameWithType: "TreeNode<T>.addChild"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.addChild"
  package: "fr.axa.automation.webengine.tree"
- uid: "java.util.List<fr.axa.automation.webengine.tree.TreeNode<T>>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "fr.axa.automation.webengine.tree.TreeNode"
    name: "TreeNode"
    fullName: "fr.axa.automation.webengine.tree.TreeNode"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "fr.axa.automation.webengine.tree.TreeNode.addChildren*"
  name: "addChildren"
  nameWithType: "TreeNode<T>.addChildren"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.addChildren"
  package: "fr.axa.automation.webengine.tree"
- uid: "fr.axa.automation.webengine.tree.TreeNode.deleteNode*"
  name: "deleteNode"
  nameWithType: "TreeNode<T>.deleteNode"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.deleteNode"
  package: "fr.axa.automation.webengine.tree"
- uid: "fr.axa.automation.webengine.tree.TreeNode.deleteRootNode*"
  name: "deleteRootNode"
  nameWithType: "TreeNode<T>.deleteRootNode"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.deleteRootNode"
  package: "fr.axa.automation.webengine.tree"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "fr.axa.automation.webengine.tree.TreeNode.printTree*"
  name: "printTree"
  nameWithType: "TreeNode<T>.printTree"
  fullName: "fr.axa.automation.webengine.tree.TreeNode<T>.printTree"
  package: "fr.axa.automation.webengine.tree"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
