<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnExportSelection.Label" xml:space="preserve">
    <value>Exporter la selection</value>
  </data>
  <data name="btnExportSelection.ScreenTip" xml:space="preserve">
    <value>Exporter les cas de test selectionné</value>
  </data>
  <data name="btnExportAll.Label" xml:space="preserve">
    <value>Exporter tous les JDD</value>
  </data>
  <data name="btnExportAll.ScreenTip" xml:space="preserve">
    <value>Exporter tous les cas de test dans l'onglet actuel</value>
  </data>
  <data name="BtnExportFilter.Label" xml:space="preserve">
    <value>Exporter les JDD avec filtre</value>
  </data>
  <data name="BtnExportFilter.ScreenTip" xml:space="preserve">
    <value>Exporter les jeux de données à l'aide un filtre</value>
  </data>
  <data name="btnExportEnvironmentVariable.Label" xml:space="preserve">
    <value>Exporter les variables d'environnement</value>
  </data>
  <data name="btnExportEnvironmentVariable.ScreenTip" xml:space="preserve">
    <value>Exporter les Variables d'Environment dans un fichier XML</value>
  </data>
  <data name="btnCodeGeneration.Label" xml:space="preserve">
    <value>Générer les codes ParameterList (C#)</value>
  </data>
  <data name="btnCodeGeneration.ScreenTip" xml:space="preserve">
    <value>Générer le code des parametres depuis la feuille PARAM dans le fichier ParameterList.CS</value>
  </data>
  <data name="btnDataCheck.Label" xml:space="preserve">
    <value>Vérifier les Jeux de données</value>
  </data>
  <data name="btnDataCheck.ScreenTip" xml:space="preserve">
    <value>Check the test data of the current tab and show potential errors.</value>
  </data>
  <data name="btnDataSync.Label" xml:space="preserve">
    <value>Synchroniser les JDD avec l'onglet parametres</value>
  </data>
  <data name="btnDataSync.ScreenTip" xml:space="preserve">
    <value>Synchoniser les jeux de donnée depuis l'onglet parametres. Ajouter les parametrès manquantes.</value>
  </data>
  <data name="gryTools.Label" xml:space="preserve">
    <value>Outils</value>
  </data>
  <data name="group1.Label" xml:space="preserve">
    <value>Données de test</value>
  </data>
  <data name="btnStartNow.Label" xml:space="preserve">
    <value>Lancer test</value>
  </data>
  <data name="btnStartNow.ScreenTip" xml:space="preserve">
    <value>Lancer les tests sélectionnés immediatement</value>
  </data>
  <data name="btnStop.Label" xml:space="preserve">
    <value>Arrêter</value>
  </data>
  <data name="btnStop.ScreenTip" xml:space="preserve">
    <value>Arreter le test (s'il est lancé en local)</value>
  </data>
  <data name="grpExecution.Label" xml:space="preserve">
    <value>Exécution</value>
  </data>
  <data name="btnSettingsSmall.Label" xml:space="preserve">
    <value>Paramétrage</value>
  </data>
  <data name="btnSettings.Label" xml:space="preserve">
    <value>Paramétrage</value>
  </data>
  <data name="btnAbout.Label" xml:space="preserve">
    <value>A propose de ...</value>
  </data>
  <data name="btnHelp.Label" xml:space="preserve">
    <value>Aide en ligne</value>
  </data>
  <data name="btnHelp.ScreenTip" xml:space="preserve">
    <value>Aller en ligne sur la documentation du AXA WebEngine Framework</value>
  </data>
  <data name="gryHelp.Label" xml:space="preserve">
    <value>Aide</value>
  </data>
</root>